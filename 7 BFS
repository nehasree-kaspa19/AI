from collections import deque

def bfs(graph, start):
    visited = set()  # Set to keep track of visited nodes.
    queue = deque([start])  # Initialize a queue with the starting node.
    bfs_order = []  # List to store the order of nodes visited in BFS.

    while queue:
        node = queue.popleft()  # Pop a node from the left of the queue.
        if node not in visited:
            visited.add(node)  # Mark the node as visited.
            bfs_order.append(node)  # Append the node to BFS order.

            # Add all unvisited neighbors to the queue.
            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)
    
    return bfs_order

# Example usage
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    start_node = 'A'
    bfs_result = bfs(graph, start_node)
    print(f"BFS starting from node {start_node}: {bfs_result}")
