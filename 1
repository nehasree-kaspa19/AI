import heapq

class PuzzleState:
    def _init_(self, board, goal, cost=0, parent=None):
        self.board = board
        self.goal = goal
        self.cost = cost
        self.parent = parent
        self.empty_pos = self.find_empty_pos()
        self.heuristic = self.calculate_heuristic()
        self.total_cost = self.cost + self.heuristic

    def find_empty_pos(self):
        for i, row in enumerate(self.board):
            for j, val in enumerate(row):
                if val == 0:
                    return (i, j)
        return None

    def calculate_heuristic(self):
        distance = 0
        for i, row in enumerate(self.board):
            for j, val in enumerate(row):
                if val != 0:
                    goal_i, goal_j = self.goal[val]
                    distance += abs(goal_i - i) + abs(goal_j - j)
        return distance

    def generate_successors(self):
        successors = []
        x, y = self.empty_pos
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
                successors.append(PuzzleState(new_board, self.goal, self.cost + 1, self))
        
        return successors

    def is_goal(self):
        return self.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def _lt_(self, other):
        return self.total_cost < other.total_cost

    def _eq_(self, other):
        return self.board == other.board

def a_star_search(initial_state):
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, initial_state)

    while open_list:
        current_state = heapq.heappop(open_list)
        
        if current_state.is_goal():
            return current_state

        closed_list.add(tuple(map(tuple, current_state.board)))

        for successor in current_state.generate_successors():
            if tuple(map(tuple, successor.board)) not in closed_list:
                heapq.heappush(open_list, successor)
    
    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.parent
    return path[::-1]

def main():
    initial_board = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]

    goal_positions = {1: (0, 0), 2: (0, 1), 3: (0, 2), 4: (1, 0), 5: (1, 1), 6: (1, 2), 7: (2, 0), 8: (2, 1), 0: (2, 2)}

    initial_state = PuzzleState(initial_board, goal_positions)

    solution_state = a_star_search(initial_state)
    if solution_state:
        path = reconstruct_path(solution_state)
        for step in path:
            for row in step:
                print(row)
            print()
    else:
        print("No solution found.")

if _name_ == "_main_":
    main()
